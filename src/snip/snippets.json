{
python_snip : [
  """from pydantic import BaseModel, Field, create_model
from typing import Dict, List, Union, Tuple

class NewPublishPOST(BaseModel):
    rand_user   : str
    rand_pass   : str
    car_option  : str
    body_type   : str
    car_make    : str
    car_model   : str
    car_year    : int
    car_trim    : str

    class Config:
        orm_mode = True""", """from django.db import models
from django.contrib.auth import get_user_model
from django.db.models.signals import post_save
from django.dispatch import receiver

User = get_user_model()

class UserProfile(models.Model):
    """Model For Extending Default Django User Model"""
    user = models.OneToOneField(User, 
                                on_delete=models.CASCADE, 
                                related_name='profile')
    username = models.CharField(max_length=150, blank=True, null=True)
    bio = models.TextField(blank=True, null=True)
    avatar = models.ImageField(blank=True, null=True)

    def __str__(self):
        return f'{self.user.first_name} {self.user.last_name}'

    @property
    def full_name(self):
        return f'{self.user.first_name} {self.user.last_name}'

    @property
    def posts_list(self):
        return self.user.posts.filter(author=self.user)

    @property
    def comments_list(self):
        return self.user.comments.filter(author=self.user)

@receiver(post_save, sender=User)
def create_profile(sender, instance, created, *args, **kwargs):
    """Automatically Create A User Profile When A New User IS Registered"""

    if created:
        user_profile = UserProfile(user=instance)
        setattr(user_profile, 'username', instance.username)
        user_profile.save()""", """import pandas as pd
import pyarrow as pa
import pyarrow.parquet as pq
import dask.dataframe as dd

n = int(1e7)
df = pd.DataFrame({'col': ['a'*64]*n})""", """class Solution:
    def findNumbers(self, nums: List[int]) -> int:
        count = 0
        
        for num in nums:
            count += 1 if len(str(num)) % 2 == 0
            
        return count

nums = [12,345,2,6,7896]
s = Solution()
print(s.findNumbers(nums))
""", """import spotipy as sp
from spotipy.oauth2 import SpotifyClientCredentials, SpotifyOAuth
import click


pass_auth_obj = click.make_pass_decorator(sp.client.Spotify)


@click.group()
def main():
    pass


@main.command()
@click.option(
    "--clientid",
    "-ci",
    "client_id",
    required=True,
    type=str,
    envvar="SPOTIFY_CLIENT_ID",
)
@click.option(
    "--clientsecret",
    "-cs",
    "client_secret",
    required=True,
    type=str,
    envvar="SPOTIFY_CLIENT_SECRET",
)
@click.option(
    "--redirecturl",
    "-rd",
    "redirect_uri",
    required=True,
    type=str,
    envvar="SPOTIFY_REDIRECT_URI",
)
@click.pass_context
def connect(ctx, client_id, client_secret, redirect_uri):
    try:
        ctx.obj = sp.Spotify(
            auth_manager=SpotifyOAuth(
                client_id=client_id,
                client_secret=client_secret,
                redirect_uri=redirect_uri,
                open_browser=False,
            )
        )
        click.secho("API authorization successful!", fg="green")
    except:
        click.secho("API authorization failed!", fg="red")


@main.command()
@pass_auth_obj
def play_random_saved_album(sp_auth):

    # Only 50 albums can be retrieved at a time, so make as many requests as necessary to retrieve
    # all in library.
    saved_albums = []
    offset = 0
    while True:
        albums_res = sp_auth.current_user_saved_albums(limit=50, offset=offset)""", """some_file = models.FileField('Some file', blank=True, null=True,
                             upload_to=some_file_path)""", """import discord import os

client = discord.Client()

@client.event async def on_ready(): print("Bot is ready!")

client.run(os.environ['DISCORD_BOT_TOKEN'])""", """dictionary1 = {"name": "Joy", "age": 25}
dictionary2 = {"name": "Joy", "city": "New York"}

merged_dict = {**dictionary1, **dictionary2}

print("Merged dictionary:", merged_dict)""", """a = 5

print(2 < a < 8)
print(1 == a < 3)""", """n = 5
string = "Hello!"

print(string * n)""", """from os import path

def check_for_file():
    print("Does file exist:", path.exists("data.csv"))

if __name__=="__main__":
    check_for_file()""", """my_list = ['banana', 'apple', 'orange', 'pineapple']

#Using brute force method
last_element = my_list[len(my_list) - 1]

#Using negative indeces
last_element = my_list[-1]

#Using pop method
last_element = my_list.pop()""", """def get_vowels(string):
    return [vowel for vowel in string if vowel in 'aeiou'] 

print("Vowels are:", get_vowels('This is some random string'))""", """import time

start_time = time.time()

total = 0
for i in range(10):
  total += i
print("Sum:", total)

end_time = time.time()
time_taken = end_time - start_time
print("Time: ", time_taken)""", """def most_frequent(list):
  return max(set(list), key=list.count)

mylist = [1,1,2,3,4,5,6,6,2,2]
print("most frequent item is:", most_frequent(mylist))""", """def list_to_dictionary(keys, values):
  return dict(zip(keys, values))

list1 = [1, 2, 3]
list2 = ['one', 'two', 'three']

print(list_to_dictionary(list1, list2))""", """
a, b = 1,0

try:
    print(a/b)
except ZeroDivisionError:
    print("Can not divide by zero")
finally:
    print("Executing finally block")"""
  ]
}
